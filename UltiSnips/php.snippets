snippet todo
// TODO: $0
endsnippet

snippet php
<?php 

namespace $1

class $2
{

	$0

}
endsnippet

snippet $$
$this->$1 = $${1};
endsnippet

# ================ Function Calls ======================
snippet _c "Constructor"
public function __construct(${1})
{
}
endsnippet

snippet pub
public function $1($2)
{
	$0
}
endsnippet

snippet pro
protected function $1($2)
{
	$0
}
endsnippet

snippet pri
private function $1($2)
{
	$0
}
endsnippet

snippet vpub
/** @var */
public \$$0;
endsnippet

snippet vpubs
/** @var */
public static \$$0;
endsnippet

snippet vpro
/** @var */
protected \$$0;
endsnippet

snippet @p
@param   $1   $0
endsnippet

snippet @r
@return   $1
endsnippet

snippet @t
@throws $1
endsnippet

snippet @fe
@foreach($1 as $2)
	$0
@endforeach
endsnippet

snippet @i
@include($0)
endsnippet

snippet @if
@if($1)
	$0
@endif
endsnippet

snippet ??
<?= $0 ?>
endsnippet

snippet $
$this->$0;
endsnippet

snippet $-
$$1->$0;
endsnippet

snippet $=
$$1 = $2;$0
endsnippet

# ================ Test Methods ======================
snippet $weh
$this->withoutExceptionHandling();
$0
endsnippet
snippet $a
$this->assert$1($2);$0
endsnippet

snippet $ac
$this->assertCount($1);$0
endsnippet

snippet $ae
$this->assertEquals($1);$0
endsnippet

snippet $f
$faker->$0;
endsnippet

snippet $li
$this->line($0);
endsnippet

# ================ Laravel Schema Methods ======================
snippet $t
$table->$1('$2');$0
endsnippet

snippet $ts
$table->string('$1');$0
endsnippet

snippet $tb
$table->boolean('$1');$0
endsnippet

snippet kv
'$1' => $0
endsnippet

snippet :
$1::$2('$0');
endsnippet

snippet d
dd(${1:'Checking if error exists'});$0
endsnippet

snippet dr
dd(request()->all());$0
endsnippet

snippet fore
foreach ($$1 as $$2) {
	$0
}
endsnippet

# ================ Laravel Schema Methods ======================
snippet pubr
public function $1(Request $request)
{
$0
}
endsnippet

snippet us
use $1\\$0;
endsnippet

snippet usa
use App\\$0;
endsnippet

# ================ Test Methods ======================
snippet test
/** @test */
public function $1()
{
	$0
}
endsnippet

snippet prov
/**
 * $2 data provider.
 */
public function data$1()
{
	return [
		'normal' => [
			$0
		]
	];
}
endsnippet

snippet @g
@group test
endsnippet

snippet @d
@dataProvider $0
endsnippet

# ================ Collection Methods ======================
snippet coll
collect($0)
endsnippet

snippet c.e
->each(function ($${1:value}, $key) {
	$0
})
endsnippet

snippet c.m
->map(function ($${1:value}, $key) {
	$0
})
endsnippet

snippet c.f
->filter(function ($${1:value}, $key) {
	$0
})
endsnippet

snippet c.fi
->first(function ($${1:value}, $key) {
	$0
})
endsnippet

snippet c.r
->reject(function ($${1:value}, $key) {
	$0
})
endsnippet

snippet c.i
->implode('$1', ${2:''});$0
endsnippet

snippet c.t
->tap(function ($collection) {
	$0
})
endsnippet

snippet fact
factory($1::class)->create($2);$0
endsnippet

# ================ Route methods ======================
snippet r.c
Route::$1('$2', '$3@$4');
$0
endsnippet

snippet r.p
Route::post('$2', $3);
endsnippet

snippet r.g
Route::get('$2', $3);
endsnippet

snippet r.gr
Route::group(['$1' => '$4'], function() {
	$0
});
endsnippet

snippet r
return $0;
endsnippet

snippet rj
return response()->json(${1:[]}, ${2:200});$0
endsnippet

snippet jd
json_decode($1, true);$0
endsnippet

snippet log
\Log::debug(${1});
endsnippet

snippet loge
\Log::debug(json_encode($1));
endsnippet

snippet reql
app('request')->$0;
endsnippet

snippet reqlh
app('request')->has('$1');$0
endsnippet

snippet doc
/**
 * $0
 */
endsnippet

# ================ Laravel DB query printer ======================
snippet dbquery
\DB::enableQueryLog();

$0

dd(DB::getQueryLog());
endsnippet
